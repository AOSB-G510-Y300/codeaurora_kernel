# Copyright:
# ----------------------------------------------------------------------------
# This confidential and proprietary software may be used only as authorized
# by a licensing agreement from ARM Limited.
#      (C) COPYRIGHT 2010-2012 ARM Limited, ALL RIGHTS RESERVED
# The entire notice above must be reproduced on all authorized copies and
# copies may only be made to the extent permitted by a licensing agreement
# from ARM Limited.
# ----------------------------------------------------------------------------
#
from os.path import basename

Import('env')

# Clone the environment so changes don't affect other build files
env_osk = env.Clone()

# basenames of files to exclude
osk_excludes = []

# Do not build mali_osk_timers in commercial build
if env['mali_license_is_gpl'] == '0':
	osk_excludes.append('mali_osk_timers.c')

# Source files required for the OSK. We include a "#" in the Glob expression
# to cause SCons to look in the directory relative that in which the SCons
# command is executed; otherwise, it start looking for the C source files in
# the variant directory and will fail to spot changes as the files are not
# present there.
osk_src = [Glob('*.c'), Glob('#osk/src/common/*.c')]

# Remove any excluded files
osk_src = filter(lambda node: basename(node.path) not in osk_excludes, env.Flatten(osk_src))

env_osk.Append( CPPPATH='#osk/src/linux/include' )

if env_osk['v'] != '1':
	env_osk['MAKECOMSTR'] = '[MAKE] ${SOURCE.dir}'

# Note: cleaning via the Linux kernel build system does not yet work
if env_osk.GetOption('clean') :
	makeAction=Action("cd ${SOURCE.dir} && make clean", '$MAKECOMSTR')
else:
	makeAction=Action("cd ${SOURCE.dir} && make MALI_DEBUG=${debug} MALI_HW_VERSION=${hwver} MALI_BASE_TRACK_MEMLEAK=${base_qa} MALI_LICENSE_IS_GPL=${mali_license_is_gpl} MALI_USE_UMP=${ump} MALI_UNIT_TEST=${unit} && cp lib.a $STATIC_LIB_PATH/libosk.a", '$MAKECOMSTR')

# The target is libosk.a, built from the source in osk_src, via the action makeAction
# libosk.a will be copied to $STATIC_LIB_PATH after being built by the standard Linux
# kernel build system, after which it can be installed to the directory specified if
# "libs_install" is set; this is done by LibTarget.
cmd = env_osk.Command('$STATIC_LIB_PATH/libosk.a', osk_src, [makeAction])

# Until we fathom out how the invoke the Linux build system to clean, we can use Clean
# to remove generated files.

patterns = ['*.o', '*.a', '.*.cmd', 'modules.order', '.tmp_versions', 'Module.symvers']

for p in patterns:
	Clean(cmd, Glob('#osk/src/linux/%s' % p))
	Clean(cmd, Glob('#osk/src/common/%s' % p))

env_osk.LibTarget('osk', cmd)
