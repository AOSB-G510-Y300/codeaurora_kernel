# Copyright:
# ----------------------------------------------------------------------------
# This confidential and proprietary software may be used only as authorized
# by a licensing agreement from ARM Limited.
#      (C) COPYRIGHT 2010-2011 ARM Limited, ALL RIGHTS RESERVED
# The entire notice above must be reproduced on all authorized copies and
# copies may only be made to the extent permitted by a licensing agreement
# from ARM Limited.
# ----------------------------------------------------------------------------
#

MALI_RELEASE_NAME ?= tx011-r1p1-00dev0

ifneq ($(KERNELRELEASE),)
SRC=\
	common/mali_kbase_device.c \
	common/mali_kbase_cache_policy.c \
	common/mali_kbase_mem.c \
	common/mali_kbase_mmu.c \
	common/mali_kbase_jd.c \
	common/mali_kbase_jm.c \
	common/mali_kbase_cpuprops.c \
	common/mali_kbase_gpuprops.c \
	common/mali_kbase_js.c \
	common/mali_kbase_js_affinity.c \
	common/mali_kbase_js_ctx_attr.c \
	common/mali_kbase_pm.c \
	common/mali_kbase_event.c \
	common/mali_kbase_context.c \
	common/mali_kbase_pm.c \
	common/mali_kbase_pm_driver.c \
	common/mali_kbase_pm_metrics.c \
	common/mali_kbase_pm_always_on.c \
	common/mali_kbase_pm_demand.c \
	common/mali_kbase_config.c \
	common/mali_kbase_security.c \
	common/mali_kbase_instr.c \
	common/mali_kbase_softjobs.c \
	common/mali_kbase_8401_workaround.c \
	common/mali_kbase_hw.c \
	linux/mali_kbase_mem_linux.c \
	linux/mali_kbase_core_linux.c \
	linux/mali_kbase_config_linux.c

RELATIVE_ROOT=../..
ROOT=$(KBUILD_EXTMOD)/$(RELATIVE_ROOT)
MALI_KBASE_SRC_LINUX_PATH ?= $(KBUILD_EXTMOD)/linux

# Dummy model
ifeq ($(MALI_NO_MALI), 1)
SRC += common/mali_kbase_model_dummy.c
SRC += linux/mali_kbase_model_linux.c
endif

#HW error simulation
ifeq ($(MALI_NO_MALI), 1)
SRC += common/mali_kbase_model_error_generator.c
endif

# Use vsync metrics example using PL111 driver, if available
ifeq ($(wildcard $(KBUILD_EXTMOD)/linux/mali_kbase_pm_metrics_linux.c),)
SRC += common/mali_kbase_pm_metrics_dummy.c
else
SRC += linux/mali_kbase_pm_metrics_linux.c
endif

# if MALI_FAKE_PLATFORM_DEVICE == 1 or MALI_LICENSE_IS_GPL == 0 then include proper config
ifneq ($(findstring 1,$(MALI_FAKE_PLATFORM_DEVICE))$(findstring 0,$(MALI_LICENSE_IS_GPL)), )
# config file could be in one of two locations (depending on if we are building for a thirdparty platform
# or not) therefore we need to determin where the config we want is kept
ifeq ($(wildcard $(KBUILD_EXTMOD)/linux/config/tpip/mali_kbase_config_$(MALI_PLATFORM_CONFIG).c),)
SRC+=$(subst $(KBUILD_EXTMOD),,$(wildcard $(KBUILD_EXTMOD)/linux/config/*$(MALI_PLATFORM_CONFIG).c))
else
SRC+=$(subst $(KBUILD_EXTMOD),,$(wildcard $(KBUILD_EXTMOD)/linux/config/tpip/*$(MALI_PLATFORM_CONFIG).c))
endif
	# ensure GPL version of malisw gets pulled in
	EXTRA_CFLAGS += -I$(ROOT)/kbase
endif
ifeq ($(MALI_PLATFORM_CONFIG), vexpress)
	EXTRA_CFLAGS += -DMALI_PLATFORM_CONFIG_VEXPRESS
endif

ifeq ($(findstring 0,$(MALI_LICENSE_IS_GPL)),)
# ensure GPL version of malisw gets pulled in
EXTRA_CFLAGS += -I$(ROOT)/kbase

# GPL driver supports KDS
EXTRA_CFLAGS += -DCONFIG_KDS
endif

SRC+=common/mali_kbase_js_policy_$(MALI_KBASE_SCHEDULING_POLICY).c

ifeq ($(MALI_MOCK_TEST), 1)
SRC += ../tests/internal/src/mock/mali_kbase_pm_driver_mock.c
endif

ifeq ($(MALI_BASE_TRACK_MEMLEAK), 1)
SRC += common/mali_kbase_mem_track.c
endif

include $(KBUILD_EXTMOD)/Makefile.kbase
OSK_PATH = $(ROOT)/osk
include $(OSK_PATH)/src/linux/Makefile.osk

EXTRA_CFLAGS += -DMALI_DEBUG=$(MALI_DEBUG) -DMALI_BACKEND_KERNEL=$(MALI_BACKEND_KERNEL) -DMALI_USE_UMP=$(MALI_USE_UMP) \
				-DMALI_ANDROID=$(MALI_ANDROID) -DMALI_BASE_TRACK_MEMLEAK=$(MALI_BASE_TRACK_MEMLEAK) \
				-DMALI_KERNEL_TEST_API=$(MALI_KERNEL_TEST_API) \
				-DMALI_UNIT_TEST=$(MALI_UNIT_TEST) -DMALI_INFINITE_CACHE=$(MALI_INFINITE_CACHE) \
				-DMALI_UNCACHED=$(MALI_UNCACHED) \
				-DMALI_LICENSE_IS_GPL=$(MALI_LICENSE_IS_GPL) \
				-DMALI_FAKE_PLATFORM_DEVICE=$(MALI_FAKE_PLATFORM_DEVICE) \
				-DMALI_MOCK_TEST=$(MALI_MOCK_TEST) \
				-DMALI_RELEASE_NAME=\""$(MALI_RELEASE_NAME)"\" \
				-DMALI_GATOR_SUPPORT=$(MALI_GATOR_SUPPORT) \
				-DMALI_KBASE_SRC_LINUX_PATH=$(MALI_KBASE_SRC_LINUX_PATH) \
				-DMALI_NO_MALI=$(MALI_NO_MALI) \
				-DMALI_ERROR_INJECT_ON=$(MALI_ERROR_INJECT_ON) \
				-DMALI_CUSTOMER_RELEASE=$(MALI_CUSTOMER_RELEASE) \
				-DMALI_INSTRUMENTATION_LEVEL=$(MALI_INSTRUMENTATION_LEVEL) \
				-DMALI_COVERAGE=$(MALI_COVERAGE) \
				-DMALI_KBASEP_MODEL=$(MALI_KBASEP_MODEL)

MODULE:=mali_kbase.ko
obj-m := $(MODULE:.ko=.o)
$(MODULE:.ko=-y) := $(SRC:.c=.o)
$(MODULE:.ko=-objs) := $(SRC:.c=.o) $(RELATIVE_ROOT)/osk/src/linux/lib.a

else

KDIR ?= /lib/modules/$(shell uname -r)/build

EXTRA_SYMBOLS=$(CURDIR)/../../uk/src/ukk/linux/Module.symvers $(CURDIR)/../../ump/src/devicedrv/Module.symvers

ifeq ($(findstring 0,$(MALI_LICENSE_IS_GPL)),)
# GPL driver supports KDS
EXTRA_SYMBOLS += $(CURDIR)/../../kds/lib/kds/Module.symvers
endif

# the mali_kbase module depends on the ukk module
# we get the symbols from the ukk module using KBUILD_EXTRA_SYMBOLS to prevent warnings about unknown functions
all:
	$(MAKE) -C $(KDIR) M=$(CURDIR) KBUILD_EXTRA_SYMBOLS="$(EXTRA_SYMBOLS)" modules

clean:
	$(MAKE) -C $(KDIR) M=$(CURDIR) clean

endif
